<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net48;netcoreapp3.1;net5.0</TargetFrameworks>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Copyright />
    <Description>GitLabApiClient is a .NET rest client for GitLab API v4.</Description>
    <Authors>nmklotas</Authors>
    <PackageProjectUrl>https://github.com/nmklotas/GitLabApiClient</PackageProjectUrl>
    <RepositoryUrl>https://github.com/nmklotas/GitLabApiClient</RepositoryUrl>
    <PackageTags>GitLab REST API CI Client</PackageTags>
    <PackageId>GitLabApiClient</PackageId>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Company>nmklotas</Company>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>
    <UseFullSemVerForNuGet>true</UseFullSemVerForNuGet>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Configurations>Debug;Release;Sym2nuget</Configurations>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Sym2nuget|AnyCPU'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\Sym2nuget\</OutputPath>
    <DefineConstants>TRACE;DEBUG;</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <LangVersion>latest</LangVersion>
    <ErrorReport>prompt</ErrorReport>
    <PackageId>nilnul.fs.git.svr_.gitlab.client_.GitLabApiClient</PackageId>
    <AssemblyName>$(PackageId)</AssemblyName>
    <AssemblyVersion>1.1.0.1</AssemblyVersion>
    <Version>1.1.0.1</Version>

  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>t.snk</AssemblyOriginatorKeyFile>
    <RunPostBuildEvent>OnOutputUpdated</RunPostBuildEvent>
  </PropertyGroup>
  <ItemGroup>
    <None Remove=".nugetPostBuild.bat" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" PrivateAssets="All" Version="1.0.0" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net48'">
    <Reference Include="System.Net.Http" />
  </ItemGroup>
  <!-- Workaround for https://github.com/GitTools/GitVersion/issues/1031 -->
  <PropertyGroup Condition=" '$(GitVersion_SemVer)' != ''">
    <GetVersion>false</GetVersion>
    <WriteVersionInfoToBuildLog>false</WriteVersionInfoToBuildLog>
    <UpdateAssemblyInfo>false</UpdateAssemblyInfo>
    <Version>$(GitVersion_FullSemVer)</Version>
    <VersionPrefix>$(GitVersion_MajorMinorPatch)</VersionPrefix>
    <VersionSuffix Condition=" '$(UseFullSemVerForNuGet)' == 'false' ">$(GitVersion_NuGetPreReleaseTag)</VersionSuffix>
    <VersionSuffix Condition=" '$(UseFullSemVerForNuGet)' == 'true' ">$(GitVersion_PreReleaseTag)</VersionSuffix>
    <PackageVersion Condition=" '$(UseFullSemVerForNuGet)' == 'false' ">$(GitVersion_NuGetVersion)</PackageVersion>
    <PackageVersion Condition=" '$(UseFullSemVerForNuGet)' == 'true' ">$(GitVersion_FullSemVer)</PackageVersion>
    <InformationalVersion Condition=" '$(InformationalVersion)' == '' ">$(GitVersion_InformationalVersion)</InformationalVersion>
    <AssemblyVersion Condition=" '$(AssemblyVersion)' == '' ">$(GitVersion_AssemblySemVer)</AssemblyVersion>
    <FileVersion Condition=" '$(FileVersion)' == '' ">$(GitVersion_AssemblySemFileVer)</FileVersion>
    <RepositoryBranch Condition=" '$(RepositoryBranch)' == '' ">$(GitVersion_BranchName)</RepositoryBranch>
    <RepositoryCommit Condition=" '$(RepositoryCommit)' == '' ">$(GitVersion_Sha)</RepositoryCommit>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />

  <Target Name="PostBuildMacros">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Targets" />
    </GetAssemblyIdentity>
    <ItemGroup>
      <VersionNumber Include="@(Targets->'%(Version)')" />
        <VersionNumber Include="$(Version)" />
    
      <!--<MajorMinor Include="$([System.Text.RegularExpressions.Regex]::Replace(&quot;%(Targets.Version)&quot;, &quot;^([^\.]+)\.([^\.]+)(.*)$&quot;, &quot;$1.$2&quot;))" />-->
      <MajorMinor Include="$([System.Text.RegularExpressions.Regex]::Replace(&quot;$(Version)&quot;, &quot;^([^\.]+)\.([^\.]+)(.*)$&quot;, &quot;$1.$2&quot;))" />
      
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <nilnulTime>$([System.DateTime]::UtcNow.ToString("yyMMddHHmmss"))</nilnulTime>
    <nilnulPattern4date>^.{6}</nilnulPattern4date>
    <nilnulDate>$([System.Text.RegularExpressions.Regex]::Match($(nilnulTime), $(nilnulPattern4date)))</nilnulDate>
    <nilnulPattern4clock>.{6}$</nilnulPattern4clock>
    <nilnulClock>$([System.Text.RegularExpressions.Regex]::Match($(nilnulTime), $(nilnulPattern4clock)))</nilnulClock>
    <nilnulClockCollapsed>$(nilnulClock.TrimStart('0'))</nilnulClockCollapsed>
    <_nilnulClockPrefixed>.$(nilnulClockCollapsed)</_nilnulClockPrefixed>
    <nilnulClockPrefixed>$(_nilnulClockPrefixed.TrimEnd('.'))</nilnulClockPrefixed>
    <nilnulPatchRevision>$(nilnulDate)$(nilnulClockPrefixed)</nilnulPatchRevision>
    <PackageId>nilnul.fs.git.svr_.gitlab.client_.GitLabApiClient</PackageId>
    <TargetName>$(PackageId)</TargetName>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEventDependsOn>
      $(PostBuildEventDependsOn);
      PostBuildMacros;
    </PostBuildEventDependsOn>
    <PostBuildEvent>
      echo ConfigurationName is $(ConfigurationName)
      if $(ConfigurationName) == Release (
      "NuGet.exe" pack "$(ProjectPath)" -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).nupkg -SkipDuplicate -Source local
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).nupkg -SkipDuplicate -Source my
      ) ELSE (
      if  $(ConfigurationName)==Symbol (
      "NuGet.exe" pack "$(ProjectPath)" -Symbols -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).symbols.nupkg -SkipDuplicate -Source local
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).symbols.nupkg -SkipDuplicate -Source my
      )
      if  $(ConfigurationName)==Nuget (
      "NuGet.exe" pack "$(ProjectPath)"  -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).nupkg -SkipDuplicate -Source nuget.org
      )
      if  $(ConfigurationName)==Dev2nuget (
      "NuGet.exe" pack "$(ProjectPath)"  -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)-dev
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision)-dev.nupkg -SkipDuplicate -Source nuget.org
      )
      if  $(ConfigurationName)==Sym2nuget (
      "NuGet.exe" pack "$(ProjectPath)"  -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)-sym
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision)-sym.nupkg -SkipDuplicate -Source nuget.org
      "NuGet.exe" push $(TargetName).@(MajorMinor).$(nilnulPatchRevision)-sym.nupkg -SkipDuplicate -Source my
      )
      )
    </PostBuildEvent>


  </PropertyGroup>

  <!--<Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="echo ConfigurationName is $(ConfigurationName)&#xD;&#xA;if $(ConfigurationName) == Release (&#xD;&#xA; &quot;NuGet.exe&quot; pack &quot;$(ProjectPath)&quot; -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)&#xD;&#xA; &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).nupkg -SkipDuplicate -Source local&#xD;&#xA; &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).nupkg -SkipDuplicate -Source my&#xD;&#xA;) ELSE (&#xD;&#xA; if  $(ConfigurationName)==Symbol (&#xD;&#xA;  &quot;NuGet.exe&quot; pack &quot;$(ProjectPath)&quot; -Symbols -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)&#xD;&#xA;  &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).symbols.nupkg -SkipDuplicate -Source local&#xD;&#xA;  &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).symbols.nupkg -SkipDuplicate -Source my&#xD;&#xA; )&#xD;&#xA; if  $(ConfigurationName)==Nuget (&#xD;&#xA;  &quot;NuGet.exe&quot; pack &quot;$(ProjectPath)&quot;  -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)&#xD;&#xA;  &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision).nupkg -SkipDuplicate -Source nuget.org&#xD;&#xA; )&#xD;&#xA; if  $(ConfigurationName)==Dev2nuget (&#xD;&#xA;  &quot;NuGet.exe&quot; pack &quot;$(ProjectPath)&quot;  -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)-dev&#xD;&#xA;  &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision)-dev.nupkg -SkipDuplicate -Source nuget.org&#xD;&#xA; )&#xD;&#xA; if  $(ConfigurationName)==Sym2nuget (&#xD;&#xA;  &quot;NuGet.exe&quot; pack &quot;$(ProjectPath)&quot;  -Prop Configuration=$(ConfigurationName) -Exclude **/*.tt -Version @(MajorMinor).$(nilnulPatchRevision)-sym&#xD;&#xA;  &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision)-sym.nupkg -SkipDuplicate -Source nuget.org&#xD;&#xA;  &quot;NuGet.exe&quot; push $(TargetName).@(MajorMinor).$(nilnulPatchRevision)-sym.nupkg -SkipDuplicate -Source my&#xD;&#xA; )&#xD;&#xA;)" />
  </Target>-->
</Project>
